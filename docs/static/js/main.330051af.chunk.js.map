{"version":3,"sources":["App.js","graphql/queries.js","graphql/mutations.js","graphql/subscriptions.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["CLIENT_ID","uuid","initialState","notes","sorting","loading","error","form","name","description","styles","container","padding","input","marginBottom","item","textAlign","p","color","reducer","state","action","type","updateIndex","findIndex","n","id","updatedNote","console","log","updatedNotes","completed","newSortedNotes","sortedNotes","sortedNote","sort","a","b","note","index","newNotes","slice","value","App","useReducer","dispatch","fetchNotes","API","graphql","query","notesData","data","listNotes","items","createNote","alert","clientId","variables","deleteNote","updateNote","onChange","e","target","useEffect","createSubscription","subscribe","next","noteData","onCreateNote","deleteSubscription","noteId","onDeleteNote","updateSubscription","onUpdateNote","unsubscribe","style","placeholder","onClick","filter","x","length","dataSource","renderItem","Item","actions","Meta","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.330051af.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React, {useEffect, useReducer} from 'react';\nimport { API } from 'aws-amplify';\nimport { List, Input, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport { v4 as uuid } from 'uuid';\nimport { listNotes } from './graphql/queries';\nimport { \n          createNote as CreateNote,\n          deleteNote as DeleteNote,\n          updateNote as UpdateNote\n        } from './graphql/mutations';\nimport { onCreateNote } from './graphql/subscriptions';\nimport { onDeleteNote } from './graphql/subscriptions';\nimport { onUpdateNote } from './graphql/subscriptions';\n\nconst CLIENT_ID =  uuid();\n\nconst initialState = {\n  notes: [],\n  sorting: \"AZ\",\n  loading: true,\n  error: false,\n  form: { name: '', description: '' }\n}\n\n// Creating the styles for the components for this app\nconst styles = {\n  container: {padding: 20},\n  input: {marginBottom: 10},\n  item: { textAlign: 'left' },\n  p: { color: '#1890ff' }\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'SET_NOTES':\n      return { ...state, notes: action.notes, loading: false }\n\n\n    case 'UPDATE_NOTES':\n      /**\n       * Create a new constant called updateIndex and assign it a value that will\n       * take the current state of the notes listed, and find the index by the id \n       * property of the note on the page and check to see if the note's id is equal \n       * in both value and type to the action.id of the reducer function.\n       */\n      const updateIndex = state.notes.findIndex(n => n.id === action.updatedNote)\n      console.log(updateIndex);\n      console.log(action.updatedNote);\n      /**  \n       * The notes that the user is seeing on the page\n       */\n      const updatedNotes = [...state.notes]\n      console.log(updatedNotes);\n      // Show me what the notes constant is holding in the console\n      //console.log(updatedNotes);\n      /**\n       * setting the note at index(...xyz) to the opposite of what it was before\n       */\n      updatedNotes[updateIndex].completed = !updatedNotes[updateIndex].completed\n      \n      /**\n       * Return all the previous notes, including the current notes and...\n       * perform the action on the active note, while the page isn't loading.\n       */\n      return { ...state, notes: updatedNotes, loading: false }\n      // end of UPDATE_NOTES case\n\n\n      case \"SORTED_NOTE\":\n        let newSortedNotes, sortedNotes;\n        if (state.sortedNote === \"AZ\") {\n          newSortedNotes = \"ZA\";\n          sortedNotes = state.notes.sort((a, b) => (a.name > b.name ? 1 : -1));\n        } else {\n          newSortedNotes = \"AZ\";\n          sortedNotes = state.notes.sort((a, b) => (a.name < b.name ? 1 : -1));\n        }\n        return { ...state, notes: sortedNotes, sortedNote: newSortedNotes };\n\n    case 'ADD_NOTE':\n      return { ...state, notes: [action.note, ...state.notes]}\n    case 'REMOVE_NOTE':\n      const index = state.notes.findIndex(n => n.id === action.id)\n      //console.log(index);\n      const newNotes = [\n        ...state.notes.slice(0, index), // filter vs slice\n        ...state.notes.slice(index + 1)\n      ];\n      return { ...state, notes: newNotes }\n    case 'RESET_FORM':\n      return { ...state, form: initialState.form }\n    case 'SET_INPUT':\n      return { ...state, form: { ...state.form, [action.name]: action.value } }\n    case 'ERROR':\n      return { ...state, loading: false, error: true }\n    default:\n      return { ...state};\n  }\n};\n\nexport default function App() {\n  // const initialState = { notes: [] };\n\n  // update the main App function to create the state and dispatch variables by calling useReducer and passing in the reducer and initialState:\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  // create a fetchNotes function (in the main App function) that will call the AppSync API and set the notes array once the API call is successful:\n\n  const fetchNotes = async() => {\n    try {\n      const notesData = await API.graphql({\n        query: listNotes\n      });\n      dispatch({ type: 'SET_NOTES', notes: notesData.data.listNotes.items });\n    } catch (err) {\n      console.log(err);\n      dispatch({ type: 'ERROR' });\n    }\n  };\n\n  const createNote = async() => {\n    const { form } = state\n    if (!form.name || !form.description) {\n       return alert('please enter a name and description')\n    }\n    const note = { ...form, clientId: CLIENT_ID, completed: false, id: uuid() }\n    dispatch({ type: 'ADD_NOTE', note })\n    dispatch({ type: 'RESET_FORM' })\n    try {\n      await API.graphql({\n        query: CreateNote,\n        variables: { input: note }\n      })\n      console.log('successfully created note!')\n    } catch (err) {\n      console.log(\"error: \", err)\n    }\n  }\n\n  const deleteNote = async({ id }) => {\n      try {\n      await API.graphql({\n        query: DeleteNote,\n        variables: { input: { id } }\n      })\n      console.log('successfully deleted note!')\n      } catch (err) {\n        console.error(err)\n    }\n  };\n\n  const sort = () => {\n    dispatch({ type: \"SORTED_NOTE\" });\n  };\n  // note being passed to updateNote to be scrutinized in the index below\n  const updateNote = async(note) => {\n    // work through each of these to find out what they do\n\n    // find the index of the note we are messing with by comparing the note id to the current list of notes\n    const index = state.notes.findIndex(n => n.id === note.id)\n    // create variable called notes, assign the value of an array that is spreading in all other current notes\n    const notes = [...state.notes]\n    // take the index of the new variable notes from above and interrogate if it is marked completed or not completed\n    notes[index].completed = !note.completed\n    // call the reducer of SET_NOTES, and pass it the newly changed notes from 2 lines above\n    dispatch({ type: 'SET_NOTES', notes})\n    // try executing this try statement, it should work\n    try {\n      // wait for the graphql API\n      await API.graphql({\n        // make a query to UpdateNote,\n        query: UpdateNote,\n        // with the input variables of id, and completed notes index array\n        variables: { input: { id: note.id, completed: notes[index].completed } }\n      })\n      // Show me that the note was updated in the console.\n      console.log('note successfully updated!')\n      // otherwise, execute this catch statement because the try statement didn't work\n    } catch (err) {\n      console.error(err)\n    }\n  };\n\n  function onChange(e) {\n    dispatch({ type: 'SET_INPUT', name: e.target.name, value: e.target.value })\n  }\n\n  // Now, invoke the fetchNotes function by implementing the useEffect hook (in the main App function):\n  useEffect(() => {\n    fetchNotes();\n\n\n\n\n    // onCreateNote subscription\n    const createSubscription = API.graphql({\n      query: onCreateNote\n    })\n      .subscribe({\n        next: noteData => {\n          const note = noteData.value.data.onCreateNote\n          //console.log(note);\n          //console.log(\"I made it to line 138 !\");\n          // if its a note that I created, don't dispatch it\n          if (CLIENT_ID === note.clientId) return\n          // dispatch = else condition\n          dispatch({ type: 'ADD_NOTE', note })\n        }\n      })\n      \n\n      // onDeleteNote subscription\n    // making a query to the graphql API\n    const deleteSubscription = API.graphql({\n      query: onDeleteNote\n    })\n\n      .subscribe({\n        next: noteData => {\n          const noteId = noteData.value.data.onDeleteNote.id\n          //console.log(id);\n          //console.log(index);\n          //console.log(notes);\n        \n          // need to update the user interface\n          dispatch({ type: 'REMOVE_NOTE', id: noteId })\n          //console.log(\"I made it into the next subscription on line 158!\");\n        }\n      })\n\n      const updateSubscription = API.graphql({\n        query: onUpdateNote\n      })\n\n        .subscribe({\n          next: noteData => {\n            const noteId = noteData.value.data.onUpdateNote.id\n            console.log(noteId);\n\n            dispatch({ type: 'UPDATE_NOTES' , updatedNote: noteId})\n          }\n        })\n\n      return () => {\n        createSubscription.unsubscribe()\n        deleteSubscription.unsubscribe()\n        updateSubscription.unsubscribe()\n\n      }\n\n\n  }, []); // closing useEffect statement\n\n  // defining renderItem\n  function renderItem(Item) {\n    return (\n      <List.Item \n        style={styles.item}\n        actions={[\n        <p style={styles.p} onClick={() => deleteNote(Item)}>Delete</p>,\n        <p style={styles.p} onClick={() => updateNote(Item)}>\n      {Item.completed ? 'completed' : 'mark completed'}\n    </p>\n  ]}\n      >\n        <List.Item.Meta\n          title={Item.name}\n          description={Item.description}\n        />\n      </List.Item>\n    )\n  };\n\n  return (\n    //return the main UI for the component\n    <div style={styles.container}>\n\n      <h1>Tia's To-Do:</h1>\n\n      <hr />\n      <br />\n      <h2>Add a new to-do task: </h2>\n\n      <Input\n        onChange={onChange}\n        value={state.form.name}\n        placeholder=\"Note Name\"\n        name='name'\n        style={styles.input}\n      />\n      <Input\n        onChange={onChange}\n        value={state.form.description}\n        placeholder=\"Note description\"\n        name='description'\n        style={styles.input}\n      />\n      <Button\n        onClick={createNote}\n        type=\"primary\"\n      >\n        Create Note\n      </Button>\n\n      <br />\n      <br />\n\n      <Button\n        onClick={sort}\n        type=\"primary\"\n      >\n        Sort!\n      </Button>\n\n      <h3>\n        {state.notes.filter(x => x.completed === false).length} Tasks To Do / {state.notes.length} Total Tasks\n      </h3>\n\n      <List \n        loading={state.loading}\n        dataSource={state.notes}\n        renderItem={renderItem}\n      />\n\n\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\n// export default App;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = /* GraphQL */ `\n  query GetNote($id: ID!) {\n    getNote(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNotes = /* GraphQL */ `\n  query ListNotes(\n    $filter: ModelNoteFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = /* GraphQL */ `\n  mutation CreateNote(\n    $input: CreateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    createNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNote = /* GraphQL */ `\n  mutation UpdateNote(\n    $input: UpdateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    updateNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNote = /* GraphQL */ `\n  mutation DeleteNote(\n    $input: DeleteNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    deleteNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = /* GraphQL */ `\n  subscription OnCreateNote {\n    onCreateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNote = /* GraphQL */ `\n  subscription OnUpdateNote {\n    onUpdateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNote = /* GraphQL */ `\n  subscription OnDeleteNote {\n    onDeleteNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://uzv5ndd5wfdszpwhpaaekitup4.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-2ufgm75bovhbxfcuweyqxggu3q\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}